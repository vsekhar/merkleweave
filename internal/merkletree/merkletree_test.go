package merkletree_test

import (
	"testing"

	"github.com/vsekhar/merkleweave/internal/merkletree"
)

// Keep this in sync with merkletree.hashLength (though we don't want to export
// that one and we don't want to do in-package tests here).
const hashLength = 64

func TestAppend(t *testing.T) {
	m := merkletree.New()
	if m.Len() != 0 {
		t.Fatal("expected empty merkletree")
	}
	b1 := []byte{1, 2, 3}
	m.Append(b1)
	if m.Len() != 1 {
		t.Error("expected len 1")
	}
}

func TestSummary(t *testing.T) {
	m := merkletree.New()
	if !m.Summary().Equals(merkletree.EmptyTreeSummary) {
		t.Errorf("unexpected empty tree summary")
	}
	b1 := []byte{1, 2, 3}
	m.Append(b1)
	s := m.Summary()
	good1 := merkletree.Summary{
		N:       1,
		Summary: [merkletree.HashLength]byte{0xc2, 0x2c, 0x63, 0xf2, 0x54, 0x8b, 0x15, 0xd9, 0xa7, 0x6, 0x16, 0xc6, 0x94, 0x9c, 0x58, 0x68, 0x28, 0x8d, 0xd5, 0x2c, 0xc, 0x36, 0x65, 0x7e, 0x1b, 0xb8, 0x77, 0x83, 0x76, 0x28, 0xc7, 0xa6, 0x55, 0xf2, 0xf1, 0x47, 0x96, 0x4, 0x65, 0xeb, 0x5a, 0xdf, 0xd7, 0x2f, 0xf6, 0x5d, 0x5c, 0x7b, 0x60, 0xf4, 0xd8, 0x81, 0x26, 0x90, 0x68, 0xe7, 0x35, 0xb8, 0x9, 0x38, 0xf8, 0xfe, 0xdb, 0xe0},
	}
	if !s.Equals(good1) {
		t.Errorf("unexpected summary %#v", s)
	}

	times := 100
	for i := 0; i < times; i++ {
		m.Append(b1)
	}
	s = m.Summary()
	good101 := merkletree.Summary{
		N:       101,
		Summary: [merkletree.HashLength]byte{0x7d, 0xe2, 0x71, 0xc2, 0x92, 0xec, 0xb7, 0x86, 0xe1, 0xfb, 0x8a, 0x6b, 0x10, 0xc6, 0xbe, 0x5d, 0xcc, 0xba, 0x47, 0xa4, 0xdd, 0x93, 0xdc, 0x3b, 0xb1, 0xb9, 0xac, 0x7a, 0xaf, 0xa0, 0xa2, 0xac, 0xef, 0x27, 0xfd, 0x4f, 0x92, 0x61, 0x39, 0x12, 0x36, 0x9d, 0xbc, 0xe0, 0xf5, 0x2f, 0x84, 0xab, 0x63, 0x4e, 0x27, 0x63, 0x23, 0xcc, 0xef, 0x2c, 0x96, 0x31, 0x19, 0x19, 0x92, 0xe9, 0x94, 0x5b},
	}
	if !s.Equals(good101) {
		t.Errorf("unexpected summary %#v", s)
	}
}
